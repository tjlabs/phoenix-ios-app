#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef KNSDKMANAGER_SWIFT_H
#define KNSDKMANAGER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import MetalKit;
@import ObjectiveC;
@import Realm.Swift;
@import UIKit;
#endif

#import "/Users/hyeon.k/Documents/mobility/KakaoNaviSDK-IOS/KNSDK/Defines/KNSDK-Bridging-Header.h"

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KNSDKManager",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC12KNSDKManager10KNAnimator")
@interface KNAnimator : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12KNSDKManager10KNDIPUtils")
@interface KNDIPUtils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) float CARPLAY_SCALE_FACTOR;)
+ (float)CARPLAY_SCALE_FACTOR SWIFT_WARN_UNUSED_RESULT;
+ (void)setCARPLAY_SCALE_FACTOR:(float)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(int8_t, KNImageGeometry, closed) {
  KNImageGeometryNone = 0,
  KNImageGeometryCircle = 1,
  KNImageGeometryEllipse = 2,
  KNImageGeometryRect = 3,
};

@class UIColor;

/// 대안 경로 관련 스타일 정보. 대안 경로의 선의 두께나 색상을 커스터마이징 한다.
SWIFT_CLASS("_TtC12KNSDKManager24KNMapAlterRouteInfoSwift")
@interface KNMapAlterRouteInfoSwift : KNMapAlterRouteInfo
/// 선 두께.
@property (nonatomic) float lineWidth;
/// 외곽선 두께.
@property (nonatomic) float strokeWidth;
/// 선 색.
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/// 외곽선 색.
@property (nonatomic, strong) UIColor * _Nonnull strokeColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12KNSDKManager18KNRetrivalDataRLMO")
@interface KNRetrivalDataRLMO : RealmSwiftObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager18KNMapAttributeRLMO")
@interface KNMapAttributeRLMO : KNRetrivalDataRLMO
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager18KNMapCalloutBubble")
@interface KNMapCalloutBubble : KNMapShape
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithParentID:(NSInteger)parentID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end

@class NSString;
@class UIFont;

/// 마커에서 사용하는 말풍선을 설정합니다.
/// 해당 클래스를 사용하여 말풍선에 표시될 주 텍스트, 보조 텍스트, 폰트, 폰트 컬러를 설정할 수 있습니다.
/// @see KNMapMarker
SWIFT_CLASS("_TtC12KNSDKManager29KNMapCalloutBubbleUpdateSwift")
@interface KNMapCalloutBubbleUpdateSwift : KNMapCalloutBubbleUpdate
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (KNMapCalloutBubbleUpdate * _Nonnull)setTitle:(NSString * _Nonnull)aTitle SWIFT_WARN_UNUSED_RESULT;
+ (KNMapCalloutBubbleUpdate * _Nonnull)setSubTitle:(NSString * _Nonnull)aSubTitle SWIFT_WARN_UNUSED_RESULT;
+ (KNMapCalloutBubbleUpdate * _Nonnull)setTitleFont:(UIFont * _Nonnull)aFont SWIFT_WARN_UNUSED_RESULT;
+ (KNMapCalloutBubbleUpdate * _Nonnull)setSubTitleFont:(UIFont * _Nonnull)aFont SWIFT_WARN_UNUSED_RESULT;
+ (KNMapCalloutBubbleUpdate * _Nonnull)setTitleFontColor:(UIColor * _Nonnull)aFontColor SWIFT_WARN_UNUSED_RESULT;
+ (KNMapCalloutBubbleUpdate * _Nonnull)setSubTitleFontColor:(UIColor * _Nonnull)aFontColor SWIFT_WARN_UNUSED_RESULT;
- (KNMapCalloutBubbleUpdate * _Nonnull)setTitle:(NSString * _Nonnull)aTitle SWIFT_WARN_UNUSED_RESULT;
- (KNMapCalloutBubbleUpdate * _Nonnull)setSubTitle:(NSString * _Nonnull)aSubTitle SWIFT_WARN_UNUSED_RESULT;
- (KNMapCalloutBubbleUpdate * _Nonnull)setTitleFont:(UIFont * _Nonnull)aFont SWIFT_WARN_UNUSED_RESULT;
- (KNMapCalloutBubbleUpdate * _Nonnull)setSubTitleFont:(UIFont * _Nonnull)aFont SWIFT_WARN_UNUSED_RESULT;
- (KNMapCalloutBubbleUpdate * _Nonnull)setTitleFontColor:(UIColor * _Nonnull)aFontColor SWIFT_WARN_UNUSED_RESULT;
- (KNMapCalloutBubbleUpdate * _Nonnull)setSubTitleFontColor:(UIColor * _Nonnull)aFontColor SWIFT_WARN_UNUSED_RESULT;
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end

@class KNMapCoordinateRegion;

/// 카메라의 이동을 정하는 클래스.
/// 카메라 이동은 줌, 이동, 기울기, 회전이 있고 지도상 특정 영역을 화면 스크린에 맞출 수 있다.
/// @see KNMapViewSwift
SWIFT_CLASS("_TtC12KNSDKManager22KNMapCameraUpdateSwift")
@interface KNMapCameraUpdateSwift : KNMapCameraUpdate
/// KNMapCameraUpdateSwift 객체를 생성한다.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (KNMapCameraUpdate * _Nonnull)zoomTo:(float)zoom SWIFT_WARN_UNUSED_RESULT;
+ (KNMapCameraUpdate * _Nonnull)tiltTo:(float)degree SWIFT_WARN_UNUSED_RESULT;
+ (KNMapCameraUpdate * _Nonnull)targetTo:(FloatPoint)position SWIFT_WARN_UNUSED_RESULT;
+ (KNMapCameraUpdate * _Nonnull)bearingTo:(float)degree SWIFT_WARN_UNUSED_RESULT;
+ (KNMapCameraUpdate * _Nonnull)anchorTo:(FloatPoint)anchor SWIFT_WARN_UNUSED_RESULT;
+ (KNMapCameraUpdate * _Nonnull)fitToRegion:(KNMapCoordinateRegion * _Nonnull)aRegion SWIFT_WARN_UNUSED_RESULT;
+ (KNMapCameraUpdate * _Nonnull)fitToFittingRect:(CGRect)aRect region:(KNMapCoordinateRegion * _Nonnull)aRegion SWIFT_WARN_UNUSED_RESULT;
- (KNMapCameraUpdate * _Nonnull)zoomTo:(float)zoom SWIFT_WARN_UNUSED_RESULT;
- (KNMapCameraUpdate * _Nonnull)tiltTo:(float)degree SWIFT_WARN_UNUSED_RESULT;
- (KNMapCameraUpdate * _Nonnull)targetTo:(FloatPoint)position SWIFT_WARN_UNUSED_RESULT;
- (KNMapCameraUpdate * _Nonnull)bearingTo:(float)degree SWIFT_WARN_UNUSED_RESULT;
- (KNMapCameraUpdate * _Nonnull)anchorTo:(FloatPoint)anchor SWIFT_WARN_UNUSED_RESULT;
- (KNMapCameraUpdate * _Nonnull)fitToRegion:(KNMapCoordinateRegion * _Nonnull)aRegion SWIFT_WARN_UNUSED_RESULT;
- (KNMapCameraUpdate * _Nonnull)fitToFittingRect:(CGRect)aRect region:(KNMapCoordinateRegion * _Nonnull)aRegion SWIFT_WARN_UNUSED_RESULT;
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end

@class KNMapOverlayObject;
@class ModelInfo;

SWIFT_CLASS("_TtC12KNSDKManager30KNMapCircleGeometryObjectSwift")
@interface KNMapCircleGeometryObjectSwift : KNMapCircleGeometryObject
@property (nonatomic) float maxScale;
@property (nonatomic) float minScale;
@property (nonatomic) BOOL isShow;
@property (nonatomic) int32_t priority;
@property (nonatomic) BOOL useSingleTapped;
@property (nonatomic) BOOL useDoubleTapped;
@property (nonatomic) BOOL useLongPressed;
@property (nonatomic, strong) id _Nullable aditionalParam;
@property (nonatomic, readonly) NSInteger objectID;
@property (nonatomic, readonly) BOOL needUpdate;
@property (nonatomic, readonly) KNMapOverlayObjectType objectType;
@property (nonatomic, readonly) BOOL isShowHideChanged;
@property (nonatomic, copy) void (^ _Nullable onClickDelegate)(CGPoint, KNMapOverlayObject * _Nonnull);
@property (nonatomic) float lineWidth;
@property (nonatomic) vector_uchar4 lineColor;
@property (nonatomic) LineDotType lineDotType;
@property (nonatomic, readonly, strong) ModelInfo * _Nullable modelInfo;
@property (nonatomic, readonly) BOOL needUpdateModel;
@property (nonatomic, readonly) BOOL isPrepareModel;
@property (nonatomic) vector_float2 circleCenter;
@property (nonatomic) float radius;
- (void)invalidate;
- (void)validate;
- (BOOL)renewModel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 지도 지면에 원을 그리는 클래스.
SWIFT_CLASS("_TtC12KNSDKManager16KNMapCircleSwift")
@interface KNMapCircleSwift : KNMapCircle
/// 원의 지도상 중심 위치(Katec).
@property (nonatomic) FloatPoint center;
/// 원의 반지름.
@property (nonatomic) float radius;
/// 원의 채움 색.
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
/// 원의 외곽선 색.
@property (nonatomic, strong) UIColor * _Nonnull strokeColor;
/// 원의 외곽선 두께.
@property (nonatomic) float strokeWidth;
/// 원의 외곽선 대시 패턴. 실선, 파선, 점선, 1점 쇄선, 2점 쇄선 가능.
@property (nonatomic) KNLineDashType strokeDashType;
/// 표출 유무
@property (nonatomic) BOOL isVisible;
/// 표출 우선 순위. 0부터 65535까지 숫자가 높을수록 상위로 노출된다.
@property (nonatomic) NSInteger priority;
/// 정수 값(tag)으로 정의한다.
/// 반드시 설정해야 하는 것은 아니며 객체의 그룹화나 구분자로 사용할 수 있다.
@property (nonatomic) NSInteger tag;
/// KNMapCircle 객체를 생성한다.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithParentID:(NSInteger)aParentID SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end


/// 지도상 영역을 정의하는 클래스.
/// 주 기능은 경로 오브젝트와 마커 오브젝트들의 영역들을 하나로 합쳐서 한 화면 스크린에 보여줄 수 있도록 한다.
SWIFT_CLASS("_TtC12KNSDKManager26KNMapCoordinateRegionSwift")
@interface KNMapCoordinateRegionSwift : KNMapCoordinateRegion
/// KNMapCoordinateRegion 객체를 생성한다.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)mergeWithMin:(FloatPoint)aMin max:(FloatPoint)aMax;
- (void)mergeWithRoutes:(NSArray * _Nonnull)aRoutes;
- (void)mergeWithMarkers:(NSArray * _Nonnull)aMarkers;
- (void)mergeWithRegion:(KNMapCoordinateRegion * _Nonnull)region;
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end

@class UIView;
@class UIImage;

SWIFT_CLASS("_TtC12KNSDKManager22KNMapCustomObjectSwift")
@interface KNMapCustomObjectSwift : KNMapCustomObject
@property (nonatomic) float maxScale;
@property (nonatomic) float minScale;
@property (nonatomic) BOOL isShow;
@property (nonatomic) BOOL useSingleTapped;
@property (nonatomic) BOOL useDoubleTapped;
@property (nonatomic) BOOL useLongPressed;
@property (nonatomic) float objScale;
@property (nonatomic) float angle;
@property (nonatomic) int32_t priority;
- (float)getPriority SWIFT_WARN_UNUSED_RESULT;
- (void)setPriorityWithValue:(float)value;
@property (nonatomic, strong) id _Nullable aditionalParam;
@property (nonatomic, readonly) NSInteger objectID;
@property (nonatomic) vector_float2 position;
@property (nonatomic, readonly) BOOL needUpdate;
@property (nonatomic, readonly) KNMapOverlayObjectType objectType;
@property (nonatomic, readonly) BOOL isShowHideChanged;
@property (nonatomic, copy) void (^ _Nullable onClickDelegate)(CGPoint, KNMapOverlayObject * _Nonnull);
@property (nonatomic) vector_float2 anchor;
@property (nonatomic) KNCustomObjectRenderType renderType;
@property (nonatomic) vector_float2 screenOffset;
@property (nonatomic, readonly) vector_float2 renderSize;
@property (nonatomic) vector_float2 hitBox;
- (void)validate;
- (void)invalidate;
- (void)animateObjectWithPos:(vector_float2)aPosition scale:(float)aScale angle:(float)aAngle animationTime:(float)aAnimationTime complition:(void (^ _Nullable)(KNMapCustomObject * _Nonnull))aComplition;
- (BOOL)setView:(UIView * _Nonnull)aView imageCacheID:(NSString * _Nonnull)aImageCacheID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setImage:(UIImage * _Nonnull)aImage imageCacheID:(NSString * _Nonnull)aImageCacheID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12KNSDKManager29KNMapCustomObjectSwiftCreator")
@interface KNMapCustomObjectSwiftCreator : NSObject
+ (KNMapCustomObjectSwiftCreator * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (KNMapCustomObject * _Nullable)createObjectWithId:(NSInteger)id image:(UIImage * _Nonnull)image imageCacheID:(NSString * _Nonnull)imageCacheID position:(vector_int2)position SWIFT_WARN_UNUSED_RESULT;
- (KNMapCustomObject * _Nullable)createObjectWithId:(NSInteger)id view:(UIView * _Nonnull)view imageCacheID:(NSString * _Nonnull)imageCacheID position:(vector_int2)position SWIFT_WARN_UNUSED_RESULT;
- (KNMapCustomObject * _Nullable)createObjectWithImage:(UIImage * _Nonnull)image imageCacheID:(NSString * _Nonnull)imageCacheID position:(vector_int2)position SWIFT_WARN_UNUSED_RESULT;
- (KNMapCustomObject * _Nullable)createObjectWithView:(UIView * _Nonnull)view imageCacheID:(NSString * _Nonnull)imageCacheID position:(vector_int2)position SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class KNError;

SWIFT_CLASS("_TtC12KNSDKManager19KNMapDatabaseBridge")
@interface KNMapDatabaseBridge : NSObject
- (void)insertFromFullmapDownloadWithGatewayName:(NSString * _Nonnull)gatewayName primaryKey:(int32_t)primaryKey data:(NSData * _Nullable)data md5:(NSString * _Nullable)md5;
- (void)finishFullmapDownload;
- (BOOL)isFinishFullmapDownload SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)fullmapVersion SWIFT_WARN_UNUSED_RESULT;
- (void)removeAllFromFullampDonwloadWithCompletion:(void (^ _Nonnull)(KNError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager26KNMapGeometryLayerDataRLMO")
@interface KNMapGeometryLayerDataRLMO : RealmSwiftObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager25KNMapGeometryMeshDataRLMO")
@interface KNMapGeometryMeshDataRLMO : KNRetrivalDataRLMO
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface KNMapGeometryObject (SWIFT_EXTENSION(KNSDKManager))
@property (nonatomic, readonly, strong) ModelInfo * _Nullable modelInfo;
- (ModelInfo * _Nullable)modelInfoWithObjectType:(KNMapOverlayObjectType)objectType SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL needUpdateModel;
@property (nonatomic, readonly) BOOL isPrepareModel;
- (BOOL)renewModel SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtCE12KNSDKManagerCSo19KNMapGeometryObject9ModelInfo")
@interface ModelInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class KNMapRectGeometryObject;
@class KNMapPolyLineGeometryObject;
@class KNMapSpecifiedPolyGeometryObject;

SWIFT_CLASS("_TtC12KNSDKManager26KNMapGeometryObjectCreator")
@interface KNMapGeometryObjectCreator : NSObject
+ (KNMapGeometryObjectCreator * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (KNMapRectGeometryObject * _Nonnull)createRectGeometryObject:(NSInteger)id rectCenter:(vector_float2)aRectCenter rectWidth:(float)aRectWidth rectHeight:(float)aRectHeight SWIFT_WARN_UNUSED_RESULT;
- (KNMapCircleGeometryObject * _Nonnull)createCircleGeometryObject:(NSInteger)id circleCenter:(vector_float2)aCircleCenter radius:(float)aRadius SWIFT_WARN_UNUSED_RESULT;
- (KNMapPolyLineGeometryObject * _Nonnull)createPolylineGeometryObject:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
- (KNMapRectGeometryObject * _Nonnull)createRectGeometryObject:(vector_float2)aRectCenter rectWidth:(float)aRectWidth rectHeight:(float)aRectHeight SWIFT_WARN_UNUSED_RESULT;
- (KNMapCircleGeometryObject * _Nonnull)createCircleGeometryObject:(vector_float2)aCircleCenter radius:(float)aRadius SWIFT_WARN_UNUSED_RESULT;
- (KNMapPolyLineGeometryObject * _Nonnull)createPolylineGeometryObject SWIFT_WARN_UNUSED_RESULT;
- (KNMapSpecifiedPolyGeometryObject * _Nonnull)createSpecifiedPolyGeometryObject:(NSInteger)id positions:(vector_float2 * _Nonnull)aPositions countPositions:(int32_t)aCountPositions SWIFT_WARN_UNUSED_RESULT;
- (KNMapSpecifiedPolyGeometryObject * _Nonnull)createSpecifiedPolyGeometryObject:(vector_float2 * _Nonnull)positions countPositions:(int32_t)aCountPositions SWIFT_WARN_UNUSED_RESULT;
- (void)createTrackingGeometryObject:(vector_float2)aStartPos endPos:(vector_float2)aEndPos;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class KNMapPolylineSwift;
@class KNMapPolygonSwift;
@class KNMapPolygon;
@class KNMapPolyline;
@class KNMapSegmentPolyline;

SWIFT_CLASS("_TtC12KNSDKManager20KNMapGroundObjBridge")
@interface KNMapGroundObjBridge : NSObject
+ (KNMapPolylineSwift * _Nonnull)createPolyline:(FloatPoint * _Nonnull)aPoints countPoints:(int32_t)aCountPoints SWIFT_WARN_UNUSED_RESULT;
+ (KNMapCircleSwift * _Nonnull)createCircle:(FloatPoint)aCenter radius:(float)aRadius SWIFT_WARN_UNUSED_RESULT;
+ (KNMapPolygonSwift * _Nonnull)createPolygon:(FloatPoint * _Nonnull)aPoints countPoints:(int32_t)aCountPoints SWIFT_WARN_UNUSED_RESULT;
+ (void)addHoleWithPolygon:(KNMapPolygon * _Nonnull)polygon points:(FloatPoint * _Nonnull)aPoints countPoints:(int32_t)aCountPoints;
+ (void)addPointWithPolyline:(KNMapPolyline * _Nonnull)polyline point:(FloatPoint)point;
+ (void)addPointsWithPolyline:(KNMapPolyline * _Nonnull)polyline points:(FloatPoint * _Nonnull)aPoints countPoints:(int32_t)aCountPoints;
+ (void)addSegmentWithLineSegment:(KNMapSegmentPolyline * _Nonnull)lineSegment points:(FloatPoint * _Nonnull)aPoints countPoints:(int32_t)aCountPoints color:(UIColor * _Nonnull)color;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager14KNMapImageRLMO")
@interface KNMapImageRLMO : KNRetrivalDataRLMO
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager28KNMapInfo_LevelInfo_Bridging")
@interface KNMapInfo_LevelInfo_Bridging : NSObject
@property (nonatomic) int32_t levelId;
@property (nonatomic) int32_t logicalLevelCnt;
@property (nonatomic) int32_t meshWidth;
@property (nonatomic) int32_t meshHeight;
@property (nonatomic) int32_t meshXCnt;
@property (nonatomic) int32_t meshYCnt;
@property (nonatomic) float minScale;
@property (nonatomic) float maxScale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager16KNMapIntTextRLMO")
@interface KNMapIntTextRLMO : RealmSwiftObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager29KNMapLayerPointRenderDataRLMO")
@interface KNMapLayerPointRenderDataRLMO : RealmSwiftObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager31KNMapLayerPolygonRenderDataRLMO")
@interface KNMapLayerPolygonRenderDataRLMO : RealmSwiftObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager32KNMapLayerPolylineRenderDataRLMO")
@interface KNMapLayerPolylineRenderDataRLMO : RealmSwiftObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager13KNMapLoadUtil")
@interface KNMapLoadUtil : NSObject
+ (NSArray<NSNumber *> * _Nonnull)decodeCompressPointsWithABytes:(NSData * _Nonnull)aBytes aLen:(NSInteger)aLen aPrecision:(float)aPrecision aCenter:(vector_int2)aCenter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager14KNMapLoaderRLM")
@interface KNMapLoaderRLM : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12KNSDKManager14KNMapLoaderSQL")
@interface KNMapLoaderSQL : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol KNMapLoggerReceiver;

SWIFT_CLASS("_TtC12KNSDKManager17KNMapLoggerBridge")
@interface KNMapLoggerBridge : NSObject
+ (void)error:(NSString * _Nonnull)text :(NSString * _Nonnull)file :(NSInteger)line :(NSString * _Nonnull)function;
+ (void)debug:(NSString * _Nonnull)text :(NSString * _Nonnull)file :(NSInteger)line :(NSString * _Nonnull)function;
+ (void)info:(NSString * _Nonnull)text :(NSString * _Nonnull)file :(NSInteger)line :(NSString * _Nonnull)function;
+ (void)attachLoggerReceiver:(id <KNMapLoggerReceiver> _Nonnull)receiver;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class KNMapView;
@class KNParkingLotMetaData;
@class KNParkingLot;
@class NSNumber;
@class NSDate;
@class KNMapDownLoader;

SWIFT_CLASS("_TtC12KNSDKManager12KNMapManager")
@interface KNMapManager : NSObject
- (nonnull instancetype)initWithMapURL:(NSString * _Nonnull)mapURL mapVer:(int32_t)mapVer fullmapVer:(int32_t)fullmapVer trafficURL:(NSString * _Nonnull)trafficURL trafficVer:(int32_t)trafficVer poiURL:(NSString * _Nonnull)poiURL poiVer:(int32_t)poiVer parkingLotURL:(NSString * _Nullable)parkingLotURL parkingLotVer:(int32_t)parkingLotVer langType:(KNLanguageType)langType mapType:(KNMapType)mapType enableExtraMap:(BOOL)enableExtraMap OBJC_DESIGNATED_INITIALIZER;
- (void)initializeWithCompletion:(void (^ _Null_unspecified)(KNError * _Nullable))aCompletion;
- (void)importMockFullmapDBWithCompletion:(void (^ _Nonnull)(KNError * _Nullable))aCompletion;
- (KNFullmapStatus)getFullmapStatus SWIFT_WARN_UNUSED_RESULT;
- (KNMapView * _Nullable)mapViewWithFrame:(CGRect)aFrame SWIFT_WARN_UNUSED_RESULT;
- (KNMapView * _Null_unspecified)carPlayMapViewWithFrame:(CGRect)aFrame contentsScale:(CGFloat)contenstScale SWIFT_WARN_UNUSED_RESULT;
- (KNMapView * _Null_unspecified)noneMSAACarPlayMapViewWithFrame:(CGRect)aFrame contentsScale:(CGFloat)contenstScale SWIFT_WARN_UNUSED_RESULT;
- (NSArray<KNParkingLotMetaData *> * _Null_unspecified)getParkingLotMetaDatas SWIFT_WARN_UNUSED_RESULT;
- (void)requestParkingLotWithParkingLotID:(int32_t)parkingLotID completion:(void (^ _Null_unspecified)(KNParkingLot * _Nullable))aCompletion;
- (void)requestParkingLotFloorAreaStates:(int32_t)parkingLotID floorName:(NSString * _Null_unspecified)aFloorName completion:(void (^ _Null_unspecified)(NSDictionary<NSString *, NSNumber *> * _Nullable, NSDate * _Nullable))aCompletion;
- (void)requestParkingLotFloorsAreaStates:(int32_t)parkingLotID floorNames:(NSArray<NSString *> * _Nonnull)aFloorNames completion:(void (^ _Null_unspecified)(NSDictionary<NSString *, NSDictionary<NSString *, NSNumber *> *> * _Nullable, NSDate * _Nullable))aCompletion;
- (KNMapDownLoader * _Null_unspecified)mapDownLoader SWIFT_WARN_UNUSED_RESULT;
- (void)setMapType:(KNMapType)aMapType complition:(void (^ _Null_unspecified)(KNError * _Nullable))aCompletion;
- (void)mapCacheDeleteCompletion:(void (^ _Null_unspecified)(KNError * _Nullable))aCompletion;
+ (void)setStressMode:(BOOL)aEnable;
- (void)clearParkingLotCache;
- (void)setLanguageType:(KNLanguageType)languageType;
- (void)setPOIRatio:(float)ratio;
- (float)getPOISizeRatio SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPOISubDirectory SWIFT_WARN_UNUSED_RESULT;
- (void)setBuildingFlat:(BOOL)aIsBuildingFlat;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class KNMapMarker;

SWIFT_CLASS("_TtC12KNSDKManager17KNMapMarkerBridge")
@interface KNMapMarkerBridge : NSObject
+ (void)animateWithMarker:(KNMapMarker * _Nonnull)marker coordinate:(FloatPoint)coordinate duration:(float)duration;
+ (void)setVisibleRangeWithMarker:(KNMapMarker * _Nonnull)marker minZoom:(float)minZoom maxZoom:(float)maxZoom;
+ (void)updateCalloutBubbleWithMarker:(KNMapMarker * _Nonnull)marker calloutBubbleUpdate:(KNMapCalloutBubbleUpdate * _Nonnull)calloutBubbleUpdate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 지도 위에 추가되는 사용자 핀 마커.
SWIFT_CLASS("_TtC12KNSDKManager16KNMapMarkerSwift")
@interface KNMapMarkerSwift : KNMapMarker
/// 지도상 위치(Katec)
@property (nonatomic) FloatPoint coordinate;
/// 마커의 위치를 보정하는 픽셀 오프셋.
/// 픽셀은 아이콘 이미지의 픽셀을 의미한다.
/// 아이콘 하단 중앙이 원점(0, 0)이고 오른쪽방향이 x+축, 아래쪽 방향이 y+축이다.
@property (nonatomic) IntPoint pixelOffset;
/// 마커 핀의 아이콘 이미지. 기본 핀 아이콘이 제공되며 사용자가 커스텀 이미지를 설정 할 수 있다.
@property (nonatomic, strong) UIImage * _Nonnull icon;
/// 표출 유무
@property (nonatomic) BOOL isVisible;
/// 표출 우선 순위. 0부터 65535까지 숫자가 높을수록 상위로 노출된다.
@property (nonatomic) NSInteger priority;
/// 마커를 정수 값(tag)으로 정의한다.
/// 반드시 설정해야 하는 것은 아니며 마커의 그룹화나 구분자로 사용할 수 있다.
@property (nonatomic) NSInteger tag;
/// 마커에 관련된 정보를 저장하고 있는 컨테이너 클래스를 연결하고자 할 때 사용한다.
/// 반드시 설정해야 하는 것은 아니며 필요에 따라 사용한다.
@property (nonatomic, strong) NSObject * _Nullable info;
/// 마커 말풍선의 주 타이틀입니다. updateCalloutBubble 함수를 통해 말풍선의 주 타이틀을 설정 할 수 있습니다.
/// @see KNMapMarker.updateCalloutBubble
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// 마커 말풍선의 보조 타이틀입니다. updateCalloutBubble 함수를 통해 말풍선의 보조 타이틀을 설정 할 수 있습니다.
/// @see KNMapMarker.updateCalloutBubble
@property (nonatomic, readonly, copy) NSString * _Nullable subTitle;
/// 마커 말풍선의 표출 유무입니다. (기본 값: <code>YES</code>)
@property (nonatomic) BOOL isVisibleCalloutBubble;
/// 싱글 탭 제스처 사용 여부를 설정 합니다(기본값 : YES). 만약 이 값이 NO라면, KNMapMarkerEventListenerSwift의 싱글 탭 이벤트를 받을 수 없습니다.
@property (nonatomic) BOOL useSingleTapped;
/// 더블 탭 제스처 사용 여부를 설정 합니다(기본값 : YES). 만약 이 값이 NO라면, KNMapMarkerEventListenerSwift의 더블 탭 이벤트를 받을 수 없습니다.
@property (nonatomic) BOOL useDoubleTapped;
/// 롱 탭 제스처 사용 여부를 설정 합니다(기본값 : YES). 만약 이 값이 NO라면, KNMapMarkerEventListenerSwift의 롱 탭 이벤트를 받을 수 없습니다.
@property (nonatomic) BOOL useLongPressed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithParentID:(NSInteger)aParentID SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, KNMapMeshType, closed) {
  KNMapMeshTypeGeometry = 0,
  KNMapMeshTypeText = 1,
  KNMapMeshTypeTraffic = 2,
};


@interface KNMapOverlayObject (SWIFT_EXTENSION(KNSDKManager))
@property (nonatomic, readonly) BOOL isShowHideChanged;
@property (nonatomic, readonly) BOOL needUpdate;
- (void)validate;
- (void)invalidate;
- (float)getPriority SWIFT_WARN_UNUSED_RESULT;
- (void)setPriorityWithValue:(float)value;
@end

@protocol KNMapPOIEventListener;

SWIFT_CLASS("_TtC12KNSDKManager23KNMapPOIPropertiesSwift")
@interface KNMapPOIPropertiesSwift : KNMapPOIProperties
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) BOOL isVisible;
@property (nonatomic) BOOL useSingleTapped;
@property (nonatomic) BOOL useDoubleTapped;
@property (nonatomic) BOOL useLongPressed;
@property (nonatomic, strong) id <KNMapPOIEventListener> _Nullable eventListener;
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12KNSDKManager24KNMapParkingLotAreaSwift")
@interface KNMapParkingLotAreaSwift : KNParkingLotArea
@property (nonatomic, readonly) KNParkingLotAreaType type;
@property (nonatomic, readonly) FloatPoint coordinate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12KNSDKManager30KNMapParkingLotDisplayDataRLMO")
@interface KNMapParkingLotDisplayDataRLMO : KNRetrivalDataRLMO
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager25KNMapParkingLotFloorSwift")
@interface KNMapParkingLotFloorSwift : KNParkingLotFloor
@property (nonatomic, readonly, copy) NSString * _Nonnull floorName;
@property (nonatomic, readonly) BOOL isUnderGround;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, KNParkingLotArea *> * _Nonnull areas;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12KNSDKManager27KNMapParkingLotMetadataRLMO")
@interface KNMapParkingLotMetadataRLMO : KNRetrivalDataRLMO
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol KNMapParkingLotReceiver;

SWIFT_CLASS("_TtC12KNSDKManager30KNMapParkingLotPropertiesSwift")
@interface KNMapParkingLotPropertiesSwift : KNMapParkingLotProperties
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) int32_t parkingLotId;
@property (nonatomic, strong) NSString * _Nullable floorName;
@property (nonatomic, strong) id <KNMapParkingLotReceiver> _Nullable parkingLotReciver;
@property (nonatomic) BOOL isVisibleParkingLot;
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12KNSDKManager24KNMapParkingLotStyleRLMO")
@interface KNMapParkingLotStyleRLMO : KNRetrivalDataRLMO
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager20KNMapParkingLotSwift")
@interface KNMapParkingLotSwift : KNParkingLot
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) int32_t parkingLotId;
@property (nonatomic, readonly, copy) NSArray<KNParkingLotFloor *> * _Nonnull floors;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12KNSDKManager19KNMapPoiBitmapMaker")
@interface KNMapPoiBitmapMaker : NSObject
+ (UIImage * _Nullable)convertCGContextToUIImageWithContext:(CGContextRef _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
+ (void)convertUIImageToCGContextWithImage:(UIImage * _Nonnull)image completion:(void (^ _Nonnull)(CGContextRef _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager32KNMapPolyLineGeometryObjectSwift")
@interface KNMapPolyLineGeometryObjectSwift : KNMapPolyLineGeometryObject
@property (nonatomic) float maxScale;
@property (nonatomic) float minScale;
@property (nonatomic) BOOL isShow;
@property (nonatomic) BOOL useSingleTapped;
@property (nonatomic) BOOL useDoubleTapped;
@property (nonatomic) BOOL useLongPressed;
@property (nonatomic) int32_t priority;
- (float)getPriority SWIFT_WARN_UNUSED_RESULT;
- (void)setPriorityWithValue:(float)value;
@property (nonatomic, strong) id _Nullable aditionalParam;
@property (nonatomic, readonly) NSInteger objectID;
@property (nonatomic, readonly) BOOL needUpdate;
@property (nonatomic, readonly) KNMapOverlayObjectType objectType;
@property (nonatomic, readonly) BOOL isPrepareModel;
@property (nonatomic, readonly) BOOL isShowHideChanged;
@property (nonatomic, copy) void (^ _Nullable onClickDelegate)(CGPoint, KNMapOverlayObject * _Nonnull);
@property (nonatomic) float lineWidth;
@property (nonatomic) float strokeWidth;
@property (nonatomic) vector_uchar4 lineColor;
@property (nonatomic) vector_uchar4 strokeColor;
@property (nonatomic) LineDotType lineDotType;
@property (nonatomic, readonly) BOOL needUpdateModel;
@property (nonatomic, readonly, strong) ModelInfo * _Nullable modelInfo;
- (ModelInfo * _Nullable)modelInfoWithObjectType:(KNMapOverlayObjectType)objectType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)invalidate;
- (void)validate;
- (BOOL)addPos:(vector_float2)pos SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resetPos:(vector_float2)pos index:(int32_t)aIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)renewModel SWIFT_WARN_UNUSED_RESULT;
@end


/// 지도 지면에 다각형을 그리는 클래스.
SWIFT_CLASS("_TtC12KNSDKManager17KNMapPolygonSwift")
@interface KNMapPolygonSwift : KNMapPolygon
/// 폴리곤 내부 색.
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
/// 폴리곤 라인 색.
@property (nonatomic, strong) UIColor * _Nonnull strokeColor;
/// 폴리곤 라인 두께.
@property (nonatomic) float strokeWidth;
/// 폴리곤 라인 대시 패턴. 실선, 파선, 점선, 1점 쇄선, 2점 쇄선 가능.
@property (nonatomic) KNLineDashType strokeDashType;
/// 표출 유무
@property (nonatomic) BOOL isVisible;
/// 표출 우선 순위. 0부터 65535까지 숫자가 높을수록 상위로 노출된다.
@property (nonatomic) NSInteger priority;
/// 정수 값(tag)으로 정의한다.
/// 반드시 설정해야 하는 것은 아니며 객체의 그룹화나 구분자로 사용할 수 있다.
@property (nonatomic) NSInteger tag;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithParentID:(NSInteger)aParentID SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end


/// 지도 지면에 꺽인 선을 그리는 클래스.
SWIFT_CLASS("_TtC12KNSDKManager18KNMapPolylineSwift")
@interface KNMapPolylineSwift : KNMapPolyline
/// 라인 색.
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/// 라인 두께.
@property (nonatomic) float lineWidth;
/// 라인 대시 패턴. 실선, 파선, 점선, 1점 쇄선, 2점 쇄선 가능.
@property (nonatomic) KNLineDashType lineDashType;
/// 표출 유무
@property (nonatomic) BOOL isVisible;
/// 표출 우선 순위. 0부터 65535까지 숫자가 높을수록 상위로 노출된다.
@property (nonatomic) NSInteger priority;
/// 정수 값(tag)으로 정의한다.
/// 반드시 설정해야 하는 것은 아니며 객체의 그룹화나 구분자로 사용할 수 있다.
@property (nonatomic) NSInteger tag;
/// 점들을 전달하고 KNMapPolyline 객체를 생성한다.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithParentID:(NSInteger)aParentID SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12KNSDKManager10KNMapRLMDB")
@interface KNMapRLMDB : KNMapDatabaseBridge
- (void)insertFromFullmapDownloadWithGatewayName:(NSString * _Nonnull)gatewayName primaryKey:(int32_t)primaryKey data:(NSData * _Nullable)data md5:(NSString * _Nullable)md5;
- (void)finishFullmapDownload;
- (BOOL)isFinishFullmapDownload SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)fullmapVersion SWIFT_WARN_UNUSED_RESULT;
- (void)removeAllFromFullampDonwloadWithCompletion:(void (^ _Nonnull)(KNError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12KNSDKManager28KNMapRectGeometryObjectSwift")
@interface KNMapRectGeometryObjectSwift : KNMapRectGeometryObject
@property (nonatomic) float maxScale;
@property (nonatomic) float minScale;
@property (nonatomic) BOOL isShow;
@property (nonatomic) BOOL useSingleTapped;
@property (nonatomic) BOOL useDoubleTapped;
@property (nonatomic) BOOL useLongPressed;
@property (nonatomic) int32_t priority;
@property (nonatomic, readonly) NSInteger objectID;
@property (nonatomic, readonly) BOOL needUpdate;
@property (nonatomic, readonly) KNMapOverlayObjectType objectType;
@property (nonatomic, readonly) BOOL isShowHideChanged;
@property (nonatomic, copy) void (^ _Nullable onClickDelegate)(CGPoint, KNMapOverlayObject * _Nonnull);
@property (nonatomic) float lineWidth;
@property (nonatomic) vector_uchar4 lineColor;
@property (nonatomic) LineDotType lineDotType;
@property (nonatomic, readonly) BOOL needUpdateModel;
@property (nonatomic, readonly, strong) ModelInfo * _Nullable modelInfo;
@property (nonatomic, readonly) BOOL isPrepareModel;
@property (nonatomic) float rectWidth;
@property (nonatomic) float rectHeight;
@property (nonatomic) vector_float2 rectCenter;
- (void)invalidate;
- (void)validate;
- (BOOL)renewModel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class KNMapThemePreset;

SWIFT_CLASS("_TtC12KNSDKManager16KNMapRenderState")
@interface KNMapRenderState : NSObject
@property (nonatomic, readonly) BOOL isStateChanged;
@property (nonatomic, readonly) BOOL isFlatBuildingChanged;
@property (nonatomic, strong) KNMapThemePreset * _Nonnull mapTheme;
@property (nonatomic) BOOL isNight;
@property (nonatomic) BOOL showTraffic;
@property (nonatomic) BOOL showRouteTraffic;
@property (nonatomic) BOOL showBuildling;
@property (nonatomic) BOOL isBuildingFlat;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class KNMapRouteTheme;
@protocol KNMapRouteEventListener;

SWIFT_CLASS("_TtC12KNSDKManager25KNMapRoutePropertiesSwift")
@interface KNMapRoutePropertiesSwift : KNMapRouteProperties
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) KNMapRouteTheme * _Nonnull theme;
@property (nonatomic) BOOL isVisible;
@property (nonatomic) BOOL isVisibleRGArrow;
@property (nonatomic) BOOL isVisibleFullRoute;
@property (nonatomic) BOOL useSingleTapped;
@property (nonatomic) BOOL useDoubleTapped;
@property (nonatomic) BOOL useLongPressed;
@property (nonatomic, strong) id <KNMapRouteEventListener> _Nullable eventListener;
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end

@class KNRouteColors;

/// 경로 관련 스타일 테마. 주 경로와 대안 경로의 선의 두께, 색상을 커스터마이징 할 수 있다. 또한 교통 혼잡 정보를 반영해서 혼잡도에 따라 색상을 구분 지을 수 있다.
SWIFT_CLASS("_TtC12KNSDKManager20KNMapRouteThemeSwift")
@interface KNMapRouteThemeSwift : KNMapRouteTheme
/// 주 경로의 선 두께.
@property (nonatomic) float lineWidth;
/// 주 경로의 외곽선 두께.
@property (nonatomic) float strokeWidth;
/// 주 경로의 선 색상들
@property (nonatomic, strong) KNRouteColors * _Nonnull lineColors;
/// 주 경로의 외곽선 색상들
@property (nonatomic, strong) KNRouteColors * _Nonnull strokeColors;
/// 대안 경로의 스타일 테마
@property (nonatomic, strong) KNMapAlterRouteInfo * _Nonnull alterRoute;
/// 프리셋. 드라이브 낮 테마
+ (KNMapRouteTheme * _Nonnull)driveDay SWIFT_WARN_UNUSED_RESULT;
/// 프리셋. 드라이브 밤 테마
+ (KNMapRouteTheme * _Nonnull)driveNight SWIFT_WARN_UNUSED_RESULT;
/// 프리셋. 교통 혼잡 정보가 반영된 낮 테마
+ (KNMapRouteTheme * _Nonnull)trafficDay SWIFT_WARN_UNUSED_RESULT;
/// 프리셋. 교통 혼잡 정보가 반영된 밤 테마
+ (KNMapRouteTheme * _Nonnull)trafficNight SWIFT_WARN_UNUSED_RESULT;
/// 기본 생성자
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC12KNSDKManager10KNMapSQLDB")
@interface KNMapSQLDB : KNMapDatabaseBridge
- (void)insertFromFullmapDownloadWithGatewayName:(NSString * _Nonnull)gatewayName primaryKey:(int32_t)primaryKey data:(NSData * _Nullable)data md5:(NSString * _Nullable)md5;
- (void)finishFullmapDownload;
- (BOOL)isFinishFullmapDownload SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)fullmapVersion SWIFT_WARN_UNUSED_RESULT;
- (void)removeAllFromFullampDonwloadWithCompletion:(void (^ _Nonnull)(KNError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MTKView;
@class NSNotification;

SWIFT_CLASS("_TtC12KNSDKManager10KNMapScene")
@interface KNMapScene : NSObject <MTKViewDelegate>
- (void)mtkView:(MTKView * _Nonnull)view drawableSizeWillChange:(CGSize)size;
- (void)drawInMTKView:(MTKView * _Nonnull)view;
- (void)applicationWillResignActiveWithNotification:(NSNotification * _Nonnull)notification;
- (void)applicationDidBecomeActiveWithNotification:(NSNotification * _Nonnull)notification;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12KNSDKManager19KNMapSceneLoggerCPU")
@interface KNMapSceneLoggerCPU : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager22KNMapSceneLoggerMemory")
@interface KNMapSceneLoggerMemory : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager22KNMapSceneLoggerSystem")
@interface KNMapSceneLoggerSystem : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 지도 지면에 색분할된 선을 그리는 클래스.
SWIFT_CLASS("_TtC12KNSDKManager25KNMapSegmentPolylineSwift")
@interface KNMapSegmentPolylineSwift : KNMapSegmentPolyline
/// 라인 두께.
@property (nonatomic) float lineWidth;
/// 외곽선 색.
@property (nonatomic, strong) UIColor * _Nonnull strokeColor;
/// 외곽선 두께.
@property (nonatomic) float strokeWidth;
/// 라인 안쪽에 나타나는 패턴 이미지를 설정합니다. (기본값: nil)
@property (nonatomic, strong) UIImage * _Nullable patternImage;
/// 라인의 양쪽 끝부분을 어떻게 그릴지 설정합니다.
@property (nonatomic) KNLineCapType capType;
/// 표출 유무
@property (nonatomic) BOOL isVisible;
/// 표출 우선 순위. 0부터 65535까지 숫자가 높을수록 상위로 노출된다.
@property (nonatomic) NSInteger priority;
/// 정수 값(tag)으로 정의한다.
/// 반드시 설정해야 하는 것은 아니며 객체의 그룹화나 구분자로 사용할 수 있다.
@property (nonatomic) NSInteger tag;
/// 점들을 전달하고 KNMapPolyline 객체를 생성한다.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithParentID:(NSInteger)aParentID SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC12KNSDKManager16KNMapShapeBridge")
@interface KNMapShapeBridge : NSObject
+ (NSInteger)identifierWithShape:(KNMapShape * _Nonnull)shape SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager37KNMapSpecifiedPolyGeometryObjectSwift")
@interface KNMapSpecifiedPolyGeometryObjectSwift : KNMapSpecifiedPolyGeometryObject
@property (nonatomic) float maxScale;
@property (nonatomic) float minScale;
@property (nonatomic) BOOL isShow;
@property (nonatomic) BOOL useSingleTapped;
@property (nonatomic) BOOL useDoubleTapped;
@property (nonatomic) BOOL useLongPressed;
@property (nonatomic) int32_t priority;
- (float)getPriority SWIFT_WARN_UNUSED_RESULT;
- (void)setPriorityWithValue:(float)value;
@property (nonatomic, readonly) NSInteger objectID;
@property (nonatomic, readonly) BOOL needUpdate;
@property (nonatomic, readonly) KNMapOverlayObjectType objectType;
@property (nonatomic, readonly) BOOL isShowHideChanged;
@property (nonatomic, copy) void (^ _Nullable onClickDelegate)(CGPoint, KNMapOverlayObject * _Nonnull);
@property (nonatomic) float lineWidth;
@property (nonatomic) vector_uchar4 lineColor;
@property (nonatomic) LineDotType lineDotType;
@property (nonatomic, readonly) BOOL needUpdateModel;
@property (nonatomic, readonly) BOOL isPrepareModel;
@property (nonatomic) vector_uchar4 color;
- (BOOL)addHole:(vector_float2 * _Nonnull)positions countPositions:(int32_t)aCountPositions SWIFT_WARN_UNUSED_RESULT;
- (void)invalidate;
- (void)validate;
@property (nonatomic, readonly, strong) ModelInfo * _Nullable modelInfo;
- (ModelInfo * _Nonnull)modelInfoWithObjectType:(KNMapOverlayObjectType)objectType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)renewModel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12KNSDKManager20KNMapTextEnglishRLMO")
@interface KNMapTextEnglishRLMO : KNRetrivalDataRLMO
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager19KNMapTextKoreanRLMO")
@interface KNMapTextKoreanRLMO : KNRetrivalDataRLMO
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager16KNMapThemePreset")
@interface KNMapThemePreset : KNMapTheme
+ (KNMapThemePreset * _Nonnull)getDriveDayPreset SWIFT_WARN_UNUSED_RESULT;
+ (KNMapThemePreset * _Nonnull)getDriveNightPreset SWIFT_WARN_UNUSED_RESULT;
+ (KNMapThemePreset * _Nonnull)getSearchDayPreset SWIFT_WARN_UNUSED_RESULT;
+ (KNMapThemePreset * _Nonnull)getSearchNightPreset SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12KNSDKManager28KNMapTrackingLineObjectSwift")
@interface KNMapTrackingLineObjectSwift : KNMapTrackingLineObject
@property (nonatomic) BOOL isShow;
@property (nonatomic) float lineWidth;
@property (nonatomic) vector_uchar4 lineColor;
@property (nonatomic) LineDotType lineDotType;
- (nonnull instancetype)initWithAEndPos:(vector_float2)aEndPos OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12KNSDKManager16KNMapTrafficRLMO")
@interface KNMapTrafficRLMO : KNRetrivalDataRLMO
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class KNMapUserLocation;

SWIFT_CLASS("_TtC12KNSDKManager23KNMapUserLocationBridge")
@interface KNMapUserLocationBridge : NSObject
+ (void)animateWithUserLocation:(KNMapUserLocation * _Nonnull)userLocation coordinate:(FloatPoint)coordinate angle:(float)angle duration:(float)duration;
+ (void)animateWithUserLocation:(KNMapUserLocation * _Nonnull)userLocation coordinate:(FloatPoint)coordinate duration:(float)duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol KNMapUserLocationEventListener;

SWIFT_CLASS("_TtC12KNSDKManager22KNMapUserLocationSwift")
@interface KNMapUserLocationSwift : KNMapUserLocation
/// 아이콘 이미지 객체
@property (nonatomic, strong) UIImage * _Nonnull icon;
/// 지도상 위치
@property (nonatomic) FloatPoint coordinate;
/// 유저 로케이션 위치를 보정하는 픽셀 오프셋.
/// 픽셀은 아이콘 이미지의 픽셀을 의미한다.
/// 아이콘 하단 중앙이 원점(0, 0)이고 오른쪽방향이 x+축, 아래쪽 방향이 y+축이다.
@property (nonatomic) IntPoint pixelOffset;
/// 표출 유무
@property (nonatomic) BOOL isVisible;
/// 아이콘 이미지를 지표면에 깔아서 표출합니다. (기본 값: YES)
@property (nonatomic) BOOL isFlat;
/// 아이콘 이미지 회전 각도. (0~360)
@property (nonatomic) float angle;
/// 선의 색. 현 유저 위치와 도착지를 연결하는 선
@property (nonatomic, strong) UIColor * _Nonnull guideLineColor;
/// 선의 두께. 현 유저 위치와 도착지를 연결하는 선
@property (nonatomic) float guideLineWidth;
/// 선의 도착지 위치. 가이드라인은 KNMapView에 setRoute, setRoutes를 할 때 경로의 도착지로 위치가 자동으로 설정되지만, 이 도착지 위치를 설정하면 정확한 도착 위치로 가이드라인을 보정할 수 있다.
@property (nonatomic) FloatPoint guideLineGoal;
/// 선의 대시 패턴. 현 유저 위치와 도착지를 연결하는 선
@property (nonatomic) KNLineDashType guideLineDashType;
/// 선의 표시 유무.  현 유저 위치와 도착지를 연결하는 선
@property (nonatomic) BOOL isVisibleGuideLine;
/// 표출 우선 순위. 0부터 65535까지 숫자가 높을수록 상위로 노출된다.
@property (nonatomic) NSInteger priority;
/// 싱글 탭 제스처 사용 여부를 설정 합니다(기본값 : YES). 만약 이 값이 NO라면, KNMapUserLocationEventListener의 싱글 탭 이벤트를 받을 수 없습니다.
@property (nonatomic) BOOL useSingleTapped;
/// 더블 탭 제스처 사용 여부를 설정 합니다(기본값 : YES). 만약 이 값이 NO라면, KNMapUserLocationEventListener의 더블 탭 이벤트를 받을 수 없습니다.
@property (nonatomic) BOOL useDoubleTapped;
/// 롱 탭 제스처 사용 여부를 설정 합니다(기본값 : YES). 만약 이 값이 NO라면, KNMapUserLocationEventListener의 롱 탭 이벤트를 받을 수 없습니다.
@property (nonatomic) BOOL useLongPressed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) id <KNMapUserLocationEventListener> _Nullable eventListener;
- (nonnull instancetype)initWithParentID:(NSInteger)aParentID SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12KNSDKManager15KNMapViewBridge")
@interface KNMapViewBridge : NSObject
+ (void)addMarkerWithMapView:(KNMapView * _Nonnull)mapView marker:(KNMapMarker * _Nonnull)marker;
+ (void)addMarkersWithMapView:(KNMapView * _Nonnull)mapView markers:(NSArray * _Nonnull)markers;
+ (void)removeMarkerWithMapView:(KNMapView * _Nonnull)mapView marker:(KNMapMarker * _Nonnull)marker;
+ (NSArray * _Nullable)getMarkersWithMapView:(KNMapView * _Nonnull)mapView SWIFT_WARN_UNUSED_RESULT;
+ (void)addCircleWithMapView:(KNMapView * _Nonnull)mapView circle:(KNMapCircle * _Nonnull)circle;
+ (void)removeCircleWithMapView:(KNMapView * _Nonnull)mapView circle:(KNMapCircle * _Nonnull)circle;
+ (NSArray * _Nullable)getCirclesWithMapView:(KNMapView * _Nonnull)mapView SWIFT_WARN_UNUSED_RESULT;
+ (void)addPolylineWithMapView:(KNMapView * _Nonnull)mapView polyline:(KNMapPolyline * _Nonnull)polyline;
+ (void)removePolylineWithMapView:(KNMapView * _Nonnull)mapView polyline:(KNMapPolyline * _Nonnull)polyline;
+ (NSArray * _Nullable)getPolylinesWithMapView:(KNMapView * _Nonnull)mapView SWIFT_WARN_UNUSED_RESULT;
+ (void)addPolygonWithMapView:(KNMapView * _Nonnull)mapView polygon:(KNMapPolygon * _Nonnull)polygon;
+ (void)removePolygonWithMapView:(KNMapView * _Nonnull)mapView polygon:(KNMapPolygon * _Nonnull)polygon;
+ (NSArray * _Nullable)getPolygonsWithMapView:(KNMapView * _Nonnull)mapView SWIFT_WARN_UNUSED_RESULT;
+ (void)addSegmentPolylineWithMapView:(KNMapView * _Nonnull)mapView segmentPolyline:(KNMapSegmentPolyline * _Nonnull)segmentPolyline;
+ (void)removeSegmentPolylineWithMapView:(KNMapView * _Nonnull)mapView segmentPolyline:(KNMapSegmentPolyline * _Nonnull)segmentPolyline;
+ (NSArray * _Nullable)getSegmentPolylinesWithMapView:(KNMapView * _Nonnull)mapView SWIFT_WARN_UNUSED_RESULT;
+ (CGRect)getScreenRectWithMapView:(KNMapView * _Nonnull)mapView aRegion:(KNMapCoordinateRegion * _Nonnull)aRegion SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isOverlappedWithMapView:(KNMapView * _Nonnull)mapView aScreenRect:(CGRect)aScreenRect aRegion:(KNMapCoordinateRegion * _Nonnull)aRegion SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isOverlappedWithMapView:(KNMapView * _Nonnull)mapView aScreenPoint:(CGPoint)aScreenPoint aRegion:(KNMapCoordinateRegion * _Nonnull)aRegion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol KNMapViewEventListener;
@protocol KNMapMarkerEventListener;
@class KNRoute;
@class KNGPSData;
@class KNRenderManager;
@class KNSceneRenderInfoPool;
@protocol MTLCommandQueue;
@class NSCoder;
@class KNLocation;
@class UIGestureRecognizer;
@protocol MTLDevice;

SWIFT_CLASS("_TtC12KNSDKManager14KNMapViewSwift")
@interface KNMapViewSwift : KNMapView <UIGestureRecognizerDelegate, KNMapShapeDelegate>
/// 맵  교통량 정보 표시 유무
@property (nonatomic) BOOL isVisibleTraffic;
/// 맵  건물 표시 유무
@property (nonatomic) BOOL isVisibleBuilding;
/// 맵의 현 위치(KATEC)
@property (nonatomic, readonly) FloatPoint coordinate;
/// 지도의 방향 각도(degree).
@property (nonatomic, readonly) float bearing;
/// 지도의 확대/축소 값. 값이 클수록 확대된다.
@property (nonatomic, readonly) float zoom;
/// 지도의 눕힘 각도(degree).
@property (nonatomic, readonly) float tilt;
/// 지도의 theme.
@property (nonatomic, strong) KNMapTheme * _Nonnull mapTheme;
/// 지도 제스쳐 이벤트 리스너.
@property (nonatomic, strong) id <KNMapViewEventListener> _Nullable viewEventListener;
/// 마커 이벤트 리스너.
@property (nonatomic, strong) id <KNMapMarkerEventListener> _Nullable markerEventListener;
/// 지도의 눕힘 제스쳐 사용 유무.
@property (nonatomic) BOOL useTiltGesture;
/// 확대 축소 제스쳐 사용 유무.
@property (nonatomic) BOOL useZoomGesture;
/// 회전 제스쳐 사용 유무.
@property (nonatomic) BOOL useBearingGesture;
/// 이동 제스쳐 사용 유무.
@property (nonatomic) BOOL usePanningGesture;
@property (nonatomic, readonly, strong) KNMapPOIProperties * _Nullable poiProperties;
@property (nonatomic, readonly, strong) KNMapRouteProperties * _Nullable routeProperties;
@property (nonatomic, readonly, strong) KNMapParkingLotProperties * _Nullable parkingLotProperties;
/// 맵에 경로를 설정하고 경로를 지면 위에 그린다. 첫 번째 인덱스는 주 경로이고 나머지는 대안 경로를 그린다.
- (void)setRoutes:(NSArray<KNRoute *> * _Nonnull)routes;
/// 맵에 경로를 설정하고 경로를 지도 지면 위에 그린다.
- (void)setRoute:(KNRoute * _Nonnull)route;
/// 맵에 모든 경로를 반환한다
- (NSArray<KNRoute *> * _Nonnull)getRoutes SWIFT_WARN_UNUSED_RESULT;
/// 맵에 등록된 모든 경로를 삭제한다
- (void)removeRoutesAll;
/// 맵에 줌 최소, 최대 값을 설정하여 제한한다.*
- (void)setZoomRangeWithMinimum:(float)minimum maximum:(float)maximum;
/// 현재 GPS 위치에 나타나는 유저 오브젝트.
@property (nonatomic, readonly, strong) KNMapUserLocation * _Nonnull userLocation;
@property (nonatomic, strong) KNGPSData * _Nullable DEBUG_gpsOrigin;
@property (nonatomic, strong) KNGPSData * _Nullable DEBUG_gpsMatched;
/// 지도에 등록된 마커를 모두 제거한다.
- (void)removeMarkersAll;
/// 지도에 등록된 원을 모두 제거한다.
- (void)removeCirclesAll;
/// 지도에 등록된 꺽인 선를 모두 제거한다.
- (void)removePolylinesAll;
/// 지도에 등록된 다각형을 모두 제거한다.
- (void)removePolygonsAll;
/// 지도에 등록된 색분할 선을 모두 제거한다.
- (void)removeSegmentPolylinesAll;
@property (nonatomic, getter=isPaused) BOOL paused;
@property (nonatomic, readonly) struct _FloatPoint anchor;
- (nonnull instancetype)initWithFrame:(CGRect)frame renderManager:(KNRenderManager * _Nonnull)renderManager sceneRenderInfoPool:(KNSceneRenderInfoPool * _Nonnull)sceneRenderInfoPool isCarPlay:(BOOL)isCarPlay contentsScale:(float)contentsScale renderCommandQueue:(id <MTLCommandQueue> _Nonnull)renderCommandQueue useMSAA:(BOOL)useMSAA OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)draw;
- (FloatPoint)screenToKatec:(CGPoint)screen SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)katecToScreen:(FloatPoint)katec SWIFT_WARN_UNUSED_RESULT;
- (void)cullPassedRouteWithLocation:(KNLocation * _Nonnull)aLocation isAnimate:(BOOL)aIsAnimate;
- (void)setPrivateMainRoute:(KNRoute * _Nonnull)aMainRoute alterRoutes:(NSArray<KNRoute *> * _Nonnull)aAlterRoutes;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)beginLogWithFileName:(NSString * _Nonnull)aFileName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)finishLog SWIFT_WARN_UNUSED_RESULT;
- (void)driveWithSearchType;
- (void)animateCamera:(KNMapCameraUpdate * _Nonnull)aCameraUpdate duration:(int32_t)aDuraiton withUserLocation:(BOOL)withUserLocation;
- (void)moveCamera:(KNMapCameraUpdate * _Nonnull)aCameraUpdate withUserLocation:(BOOL)withUserLocation;
- (void)onAnimateEnded:(KNMapShape * _Nonnull)aShape;
- (void)onCreatedChildObject:(KNMapShape * _Nonnull)aShape;
- (void)onDeletedChildObject:(KNMapShape * _Nonnull)aShape;
- (nonnull instancetype)initWithFrame:(CGRect)frameRect device:(id <MTLDevice> _Nullable)device SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12KNSDKManager21KNOutLineTextLabelCPU")
@interface KNOutLineTextLabelCPU : UILabel
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)drawTextInRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12KNSDKManager22KNParkingMetaDataSwift")
@interface KNParkingMetaDataSwift : KNParkingLotMetaData
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) int32_t parkingLotId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12KNSDKManager14KNRenderBuffer")
@interface KNRenderBuffer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12KNSDKManager19KNRenderIndicesRLMO")
@interface KNRenderIndicesRLMO : RealmSwiftObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager15KNRenderManager")
@interface KNRenderManager : NSObject
@property (nonatomic, readonly, strong) id <MTLDevice> _Nonnull device;
+ (KNRenderManager * _Nullable)getInstance SWIFT_WARN_UNUSED_RESULT;
- (void)initializeParkingLotLoaderWithCompletion:(void (^ _Nonnull)(KNError * _Nullable))completion;
- (KNMapViewSwift * _Nullable)createMapViewWithFrame:(CGRect)frame isCarPlay:(BOOL)isCarPlay contentsScale:(float)contentsScale useMSAA:(BOOL)useMSAA SWIFT_WARN_UNUSED_RESULT;
- (NSArray<KNParkingLotMetaData *> * _Nonnull)getParkingLotMetaDatas SWIFT_WARN_UNUSED_RESULT;
- (void)requestParkingLotWithParkingLotID:(NSInteger)parkingLotID completion:(void (^ _Nonnull)(KNParkingLot * _Nullable))completion;
- (void)requestParkingLotFloorAreaStatesWithParkingLotID:(NSInteger)parkingLotID floorName:(NSString * _Nonnull)floorName completion:(void (^ _Nonnull)(NSDictionary<NSString *, NSNumber *> * _Nullable, NSDate * _Nullable))completion;
- (void)requestParkingLotFloorsAreaStatesWithParkingLotID:(NSInteger)parkingLotID floorNames:(NSArray<NSString *> * _Nonnull)floorNames completion:(void (^ _Nonnull)(NSDictionary<NSString *, NSDictionary<NSString *, NSNumber *> *> * _Nullable, NSDate * _Nullable))completion;
- (void)clearParkingLotCache;
- (void)adjustPOIRatio;
- (void)setBuildingFlat:(BOOL)aIsBuildingFlat;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12KNSDKManager22KNRenderPrimitivesRLMO")
@interface KNRenderPrimitivesRLMO : RealmSwiftObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, KNRenderVertexType, closed) {
  KNRenderVertexTypeRectLine2D = 0,
  KNRenderVertexTypeRectLine3D = 1,
  KNRenderVertexTypeBackgroundPos2D = 2,
  KNRenderVertexTypePos2D = 3,
  KNRenderVertexTypePolygon3D = 4,
  KNRenderVertexTypeMaterialIndex = 5,
  KNRenderVertexTypeSubColorIDLine2D = 6,
  KNRenderVertexTypeColorIDLine2D = 7,
  KNRenderVertexTypePostionTex = 8,
  KNRenderVertexTypeInstancingLine2D = 9,
  KNRenderVertexTypeInstancingLine3D = 10,
  KNRenderVertexTypeInstancingLine2DWithVec = 11,
  KNRenderVertexTypeRouteLine = 12,
  KNRenderVertexTypeRouteStaticPattern = 13,
  KNRenderVertexTypePosID = 14,
  KNRenderVertexTypeNum = 15,
};


SWIFT_CLASS("_TtC12KNSDKManager20KNRenderVerticesRLMO")
@interface KNRenderVerticesRLMO : RealmSwiftObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// 주경로 관련 색상 컨테이너 클래스.
SWIFT_CLASS("_TtC12KNSDKManager18KNRouteColorsSwift")
@interface KNRouteColorsSwift : KNRouteColors
/// 교통 원활
@property (nonatomic, strong) UIColor * _Nonnull normal;
/// 교통 약간 혼잡
@property (nonatomic, strong) UIColor * _Nonnull trafficJamModerate;
/// 교통 혼잡
@property (nonatomic, strong) UIColor * _Nonnull trafficJamHeavy;
/// 교통 매우 혼잡
@property (nonatomic, strong) UIColor * _Nonnull trafficJamVeryHeavy;
/// 교통정보 확인 불가
@property (nonatomic, strong) UIColor * _Nonnull unknown;
/// 도로를 통제하거나 현재 갈 수 없는 도로 색
@property (nonatomic, strong) UIColor * _Nonnull blocked;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithDummyOption:(BOOL)aDummy SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC12KNSDKManager11KNRoutePool")
@interface KNRoutePool : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class KNSafetyData;

SWIFT_CLASS("_TtC12KNSDKManager12KNSafetyMesh")
@interface KNSafetyMesh : NSObject
@property (nonatomic) int32_t formatVersion;
@property (nonatomic) BOOL isParsed;
@property (nonatomic, copy) NSArray<KNSafetyData *> * _Nonnull safeties;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWhithData:(NSData * _Nullable)withData;
- (void)parse:(NSData * _Nullable)data;
@end


SWIFT_CLASS("_TtC12KNSDKManager21KNSceneRenderInfoPool")
@interface KNSceneRenderInfoPool : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12KNSDKManager8LRUCache")
@interface LRUCache : NSObject
- (nonnull instancetype)init:(NSInteger)maxSize OBJC_DESIGNATED_INITIALIZER;
- (id _Nullable)get:(NSInteger)key SWIFT_WARN_UNUSED_RESULT;
- (void)set:(NSInteger)key val:(id _Nonnull)val;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, LoadCompleteType, closed) {
  LoadCompleteTypeGeometry = 0,
  LoadCompleteTypeCustomObj = 1,
  LoadCompleteTypeGroundSymbol = 2,
  LoadCompleteTypeTexture = 3,
  LoadCompleteTypePOI = 4,
  LoadCompleteTypeTraffic = 5,
  LoadCompleteTypeNum = 6,
};


SWIFT_CLASS("_TtC12KNSDKManager10MBRBriding")
@interface MBRBriding : NSObject
@property (nonatomic) vector_int2 min;
@property (nonatomic) vector_int2 max;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager28OnKNDataLoadCompleteListener")
@interface OnKNDataLoadCompleteListener : NSObject
- (void)loadedWithType:(enum LoadCompleteType)type;
- (void)loadFailWithType:(enum LoadCompleteType)type knError:(KNError * _Nullable)knError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12KNSDKManager16ScreenMBRBriding")
@interface ScreenMBRBriding : NSObject
@property (nonatomic) vector_float2 modelTranslate;
@property (nonatomic) vector_float2 screenTranslate;
@property (nonatomic) vector_float2 screenSize;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS("_TtC12KNSDKManager17kakaoSDK_Bridging")
@interface kakaoSDK_Bridging : NSObject
+ (NSString * _Nullable)getkaHeader SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
