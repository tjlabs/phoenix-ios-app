#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef KMLOCATIONSDK_SWIFT_H
#define KMLOCATIONSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KMLocationSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)



enum KMFilter : NSInteger;

/// 알고리즘 설정.
SWIFT_CLASS("_TtC13KMLocationSDK11KMAlgorithm")
@interface KMAlgorithm : NSObject
/// 위치 계산에 활용한 필터. default 값 VEHICLE.
@property (nonatomic, readonly) enum KMFilter filter;
/// 위치 업데이트 주기. default 값 0.5.
@property (nonatomic, readonly) double updateInterval;
/// 위치 알고리즘 관련 설정.
/// \param filter 위치 계산에 활용한 필터. default 값 VEHICLE.
///
/// \param updateInterval 위치 업데이트 주기. default 값 0.5.
///
- (nonnull instancetype)initWithFilter:(enum KMFilter)filter updateInterval:(double)updateInterval OBJC_DESIGNATED_INITIALIZER;
/// 위치 알고리즘 관련 설정.
/// \param filter 위치 계산에 활용한 필터. default 값 VEHICLE.
///
/// \param updateInterval 위치 업데이트 주기. default 값 0.5.
///
- (nonnull instancetype)initWithUpdateInterval:(double)updateInterval OBJC_DESIGNATED_INITIALIZER;
/// 위치 알고리즘 관련 설정.
/// \param filter 위치 계산에 활용한 필터. default 값 VEHICLE.
///
/// \param updateInterval 위치 업데이트 주기. default 값 0.5.
///
- (nonnull instancetype)initWithFilter:(enum KMFilter)filter OBJC_DESIGNATED_INITIALIZER;
/// 위치 알고리즘 관련 설정.
/// \param filter 위치 계산에 활용한 필터. default 값 VEHICLE.
///
/// \param updateInterval 위치 업데이트 주기. default 값 0.5.
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class NSString;

/// 인증 설정.
SWIFT_CLASS("_TtC13KMLocationSDK6KMAuth")
@interface KMAuth : NSObject
/// authToken 값. default 값 “”.
@property (nonatomic, copy) NSString * _Nonnull authToken;
/// LocationSDK를 이용하는 앱의 ID.
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
/// LocationSDK를 이용하는 SDK의 ID.
@property (nonatomic, readonly, copy) NSString * _Nonnull serviceId;
/// userId 값
@property (nonatomic, copy) NSString * _Nonnull userId;
/// appId: 앱의 ID. serviceId: SDK의 ID.
/// \param appId 앱의 ID. default 값 “”.
///
/// \param serviceId SDK의 ID.
///
/// \param userId userId 값. startLocationManager 하기 전 설정해야 합니다.
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId serviceId:(NSString * _Nonnull)serviceId userId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
/// appId: 앱의 ID. serviceId: SDK의 ID.
/// \param appId 앱의 ID. default 값 “”.
///
/// \param serviceId SDK의 ID.
///
/// \param userId userId 값. startLocationManager 하기 전 설정해야 합니다.
///
- (nonnull instancetype)initWithServiceId:(NSString * _Nonnull)serviceId userId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class KMDev;
@class KMFeature;

/// KMLocationManager 설정.
SWIFT_CLASS("_TtC13KMLocationSDK8KMConfig")
@interface KMConfig : NSObject
/// 인증 설정.
@property (nonatomic, readonly, strong) KMAuth * _Nonnull auth;
/// 개발 설정.
@property (nonatomic, readonly, strong) KMDev * _Nonnull dev;
/// 알고리즘 설정.
@property (nonatomic, readonly, strong) KMAlgorithm * _Nonnull algorithm;
/// KMRapidChangedEvent, KMMotionActivity, indoor location을 받을지 안 받을지에 대한 설정.
@property (nonatomic, readonly, strong) KMFeature * _Nonnull feature;
/// KMLocationManager 설정.
/// \param auth 인증 설정.
///
/// \param dev 개발 설정.
///
/// \param algorithm 알고리즘 설정.
///
/// \param features 기능 설정.
///
- (nonnull instancetype)initWithAuth:(KMAuth * _Nonnull)auth dev:(KMDev * _Nonnull)dev algorithm:(KMAlgorithm * _Nonnull)algorithm feature:(KMFeature * _Nonnull)feature OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 개발 설정.
SWIFT_CLASS("_TtC13KMLocationSDK5KMDev")
@interface KMDev : NSObject
/// log를 cbt로 보낼지 production 서버로 보낼지에 대한 설정. 로그를 수집 여부는 서버에서 내려오는 값에 따라 결정됩니다. startLocationManager 하기 전 설정해야 합니다. default 값 false.
@property (nonatomic, readonly) BOOL useSandbox;
/// Xcode console에 프린트 나오게 하려면 true. default 값 false.
@property (nonatomic, readonly) BOOL useConsoleLog;
/// log를 cbt로 보낼지 production 서버로 보낼지에 대한 설정. 로그를 수집 여부는 서버에서 내려오는 값에 따라 결정됩니다. startLocationManager 하기 전 설정해야 합니다.
/// \param useSandbox cbt로 보내려면 false. production으로 보내려면 true. default 값 false.
///
/// \param useConsoleLog Xcode console에 프린트 나오게 하려면 true. default 값 false.
///
- (nonnull instancetype)initWithUseSandbox:(BOOL)useSandbox useConsoleLog:(BOOL)useConsoleLog OBJC_DESIGNATED_INITIALIZER;
/// log를 cbt로 보낼지 production 서버로 보낼지에 대한 설정. 로그를 수집 여부는 서버에서 내려오는 값에 따라 결정됩니다. startLocationManager 하기 전 설정해야 합니다.
/// \param useConsoleLog Xcode console에 프린트 나오게 하려면 true. default 값 false.
///
- (nonnull instancetype)initWithUseSandbox:(BOOL)useSandbox OBJC_DESIGNATED_INITIALIZER;
/// log를 cbt로 보낼지 production 서버로 보낼지에 대한 설정. 로그를 수집 여부는 서버에서 내려오는 값에 따라 결정됩니다. startLocationManager 하기 전 설정해야 합니다.
/// \param useConsoleLog Xcode console에 프린트 나오게 하려면 true. default 값 false.
///
- (nonnull instancetype)initWithUseConsoleLog:(BOOL)useConsoleLog OBJC_DESIGNATED_INITIALIZER;
/// log를 cbt로 보낼지 production 서버로 보낼지에 대한 설정. 로그를 수집 여부는 서버에서 내려오는 값에 따라 결정됩니다. startLocationManager 하기 전 설정해야 합니다.
/// \param useConsoleLog Xcode console에 프린트 나오게 하려면 true. default 값 false.
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// 기능 설정.
SWIFT_CLASS("_TtC13KMLocationSDK9KMFeature")
@interface KMFeature : NSObject
/// KMRapidChangedEvent를 받을지 안 받을지에 대한 설정. default 값 false.
@property (nonatomic, readonly) BOOL useRapidChangedEvent;
/// KMMotionActivity를 받을지 안 받을지에 대한 설정. default 값 false.
@property (nonatomic, readonly) BOOL useMotionActivity;
/// Indoor location을 받을지 안받을지에 대한 설정. default 값 false.
@property (nonatomic) BOOL useIndoorLocation;
/// 기능 설정.
/// \param useRapidChangedEvent KMRapidChangedEvent를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useMotionActivity KMMotionActivity를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useIndoorLocation Indoor location을 받을지 안받을지에 대한 설정. default 값 false.
///
- (nonnull instancetype)initWithUseRapidChangedEvent:(BOOL)useRapidChangedEvent useMotionActivity:(BOOL)useMotionActivity useIndoorLocation:(BOOL)useIndoorLocation OBJC_DESIGNATED_INITIALIZER;
/// 기능 설정.
/// \param useRapidChangedEvent KMRapidChangedEvent를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useMotionActivity KMMotionActivity를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useIndoorLocation Indoor location을 받을지 안받을지에 대한 설정. default 값 false.
///
- (nonnull instancetype)initWithUseMotionActivity:(BOOL)useMotionActivity useIndoorLocation:(BOOL)useIndoorLocation OBJC_DESIGNATED_INITIALIZER;
/// 기능 설정.
/// \param useRapidChangedEvent KMRapidChangedEvent를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useMotionActivity KMMotionActivity를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useIndoorLocation Indoor location을 받을지 안받을지에 대한 설정. default 값 false.
///
- (nonnull instancetype)initWithUseRapidChangedEvent:(BOOL)useRapidChangedEvent useIndoorLocation:(BOOL)useIndoorLocation OBJC_DESIGNATED_INITIALIZER;
/// 기능 설정.
/// \param useRapidChangedEvent KMRapidChangedEvent를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useMotionActivity KMMotionActivity를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useIndoorLocation Indoor location을 받을지 안받을지에 대한 설정. default 값 false.
///
- (nonnull instancetype)initWithUseRapidChangedEvent:(BOOL)useRapidChangedEvent useMotionActivity:(BOOL)useMotionActivity OBJC_DESIGNATED_INITIALIZER;
/// 기능 설정.
/// \param useRapidChangedEvent KMRapidChangedEvent를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useMotionActivity KMMotionActivity를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useIndoorLocation Indoor location을 받을지 안받을지에 대한 설정. default 값 false.
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 기능 설정.
/// \param useRapidChangedEvent KMRapidChangedEvent를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useMotionActivity KMMotionActivity를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useIndoorLocation Indoor location을 받을지 안받을지에 대한 설정. default 값 false.
///
- (nonnull instancetype)initWithUseRapidChangedEvent:(BOOL)useRapidChangedEvent OBJC_DESIGNATED_INITIALIZER;
/// 기능 설정.
/// \param useRapidChangedEvent KMRapidChangedEvent를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useMotionActivity KMMotionActivity를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useIndoorLocation Indoor location을 받을지 안받을지에 대한 설정. default 값 false.
///
- (nonnull instancetype)initWithUseMotionActivity:(BOOL)useMotionActivity OBJC_DESIGNATED_INITIALIZER;
/// 기능 설정.
/// \param useRapidChangedEvent KMRapidChangedEvent를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useMotionActivity KMMotionActivity를 받을지 안 받을지에 대한 설정. default 값 false.
///
/// \param useIndoorLocation Indoor location을 받을지 안받을지에 대한 설정. default 값 false.
///
- (nonnull instancetype)initWithUseIndoorLocation:(BOOL)useIndoorLocation OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

/// KMLocationManager isFeatureAvailable 함수에 파라미터로 넘겨서 사용 가능 여부 조회 가능.
typedef SWIFT_ENUM(NSInteger, KMFeatureAvailability, open) {
/// Indoor 사용 가능 여부.
  KMFeatureAvailabilityINDOOR = 0,
/// Rapid change 사용 가능 여부.
  KMFeatureAvailabilityRAPID_CHANGE = 1,
/// Motion activity 사용 가능 여부.
  KMFeatureAvailabilityMOTION_ACTIVITY = 2,
};

/// 위치 필터. 위치를 가져올 때 사용하는 알고리즘. 기본값 VEHICLE.
typedef SWIFT_ENUM(NSInteger, KMFilter, open) {
/// OS 정확도. 받은 CLLocation 그대로 보냄.
  KMFilterGPS = 0,
/// LocationSDK에서 사용되는 default 필터.
  KMFilterVEHICLE = 1,
};

/// 실내, 실외 상태
typedef SWIFT_ENUM(NSInteger, KMInOutStatus, open) {
/// 알 수 없는 상태.
  KMInOutStatusUNKNOWN = -1,
/// 실외.
  KMInOutStatusOUTDOOR = 0,
/// 실내.
  KMInOutStatusINDOOR = 1,
/// 실외에서 실내로 들어오는 상태.
  KMInOutStatusOUT_TO_IN = 2,
/// 실내에서 실외로 나가는 상태.
  KMInOutStatusIN_TO_OUT = 3,
};


/// 실내 위치 정보.
SWIFT_CLASS("_TtC13KMLocationSDK15KMIndoorLocInfo")
@interface KMIndoorLocInfo : NSObject
/// 주차장 ID.
@property (nonatomic) NSInteger parkingLotId;
/// 건물 및 층 을 나타내는 코드.
@property (nonatomic, copy) NSString * _Nonnull floorDisplayName;
/// 위치사업자 코드.
@property (nonatomic, copy) NSString * _Nonnull sourceCode;
/// 실내, 실외 상태
@property (nonatomic) enum KMInOutStatus inOutStatus;
/// 주차장 zone
@property (nonatomic, copy) NSString * _Nonnull parkingZone;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithParkingLotId:(NSInteger)parkingLotId floorDisplayName:(NSString * _Nonnull)floorDisplayName sourceCode:(NSString * _Nonnull)sourceCode inOutStatus:(enum KMInOutStatus)inOutStatus parkingZone:(NSString * _Nonnull)parkingZone OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;
@class NSCoder;
@class CLLocationSourceInformation;

/// 위치 정보와 그와 관련된 정보를 담고 있는 자료구조입니다. CLLocation를 상속받았습니다.
SWIFT_CLASS("_TtC13KMLocationSDK10KMLocation")
@interface KMLocation : CLLocation
/// gps나 indoor로 제공.
@property (nonatomic, copy) NSString * _Nonnull provider;
/// 위치 유효성에 대한 Valid값. 예: 최근 2초간 OS 위치를 올려주지 않을 경우 isValid false.
@property (nonatomic) BOOL isValid;
/// 위치 계산에 활용한 필터. 기본값은 VEHICLE.
@property (nonatomic) enum KMFilter filter;
/// 하늘이 잘 보이고 GPS가 잘 잡히는지 나타내는 값 0.0 ~ 1.0. 0.0이면 GPS가 잘 안 잡힌다는 뜻.
@property (nonatomic) double openSkyAccuracy;
/// 객체 데이터를 추정하기 위해 활용된 위치데이터들 중 가장 최신 데이터의 시각. CLLocation의 timestamp가 이 값에 저장됩니다. LocationSDK에서 interval마다 만든 날짜가 CLLocation timestamp에 저장되어 덮어씌기를 합니다.
@property (nonatomic, copy) NSDate * _Nonnull latestMeasuredTime;
/// 추정된 시간과 최신 os 시간과의 차이. 단위: second.
@property (nonatomic) double estimatedTimeLag;
/// 실내 위치 정보.
@property (nonatomic, strong) KMIndoorLocInfo * _Nullable indoorLocInfo;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate altitude:(CLLocationDistance)altitude horizontalAccuracy:(CLLocationAccuracy)horizontalAccuracy verticalAccuracy:(CLLocationAccuracy)verticalAccuracy course:(CLLocationDirection)course courseAccuracy:(CLLocationDirectionAccuracy)courseAccuracy speed:(CLLocationSpeed)speed speedAccuracy:(CLLocationSpeedAccuracy)speedAccuracy timestamp:(NSDate * _Nonnull)timestamp provider:(NSString * _Nonnull)provider isValid:(BOOL)isValid filter:(enum KMFilter)filter latestMeasuredTime:(NSDate * _Nullable)latestMeasuredTime estimatedTimeLag:(double)estimatedTimeLag indoorLocInfo:(KMIndoorLocInfo * _Nullable)indoorLocInfo openSkyAccuracy:(double)openSkyAccuracy SWIFT_AVAILABILITY(ios,introduced=13.4);
/// 생성자
/// \param coordinate 좌표.
///
/// \param altitude 고도.
///
/// \param horizontalAccuracy 수평 정확도.
///
/// \param verticalAccuracy 수직 정확도.
///
/// \param course 방향.
///
/// \param speed 속도 m/s.
///
/// \param timestamp interval로 보내는 KMLocation이 생성된 시간.
///
/// \param provider gps나 indoor로 제공.
///
/// \param isValid 위치 유효성에 대한 Valid값. 예: 최근 2초간 OS 위치를 올려주지 않을 경우 isValid false.
///
/// \param filter 위치 계산에 활용한 필터. 기본값은 VEHICLE.
///
/// \param latestMeasuredTime 객체 데이터를 추정하기 위해 활용된 위치데이터들 중 가장 최신 데이터의 시각.
///
/// \param estimatedTimeLag 추정된 시간과 최신 os 시간과의 차이.
///
/// \param indoorLocInfo 실내 위치 정보.
///
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate altitude:(CLLocationDistance)altitude horizontalAccuracy:(CLLocationAccuracy)horizontalAccuracy verticalAccuracy:(CLLocationAccuracy)verticalAccuracy course:(CLLocationDirection)course speed:(CLLocationSpeed)speed timestamp:(NSDate * _Nonnull)timestamp provider:(NSString * _Nonnull)provider isValid:(BOOL)isValid filter:(enum KMFilter)filter latestMeasuredTime:(NSDate * _Nullable)latestMeasuredTime estimatedTimeLag:(double)estimatedTimeLag indoorLocInfo:(KMIndoorLocInfo * _Nullable)indoorLocInfo openSkyAccuracy:(double)openSkyAccuracy;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithLatitude:(CLLocationDegrees)latitude longitude:(CLLocationDegrees)longitude SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate altitude:(CLLocationDistance)altitude horizontalAccuracy:(CLLocationAccuracy)hAccuracy verticalAccuracy:(CLLocationAccuracy)vAccuracy timestamp:(NSDate * _Nonnull)timestamp SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate altitude:(CLLocationDistance)altitude horizontalAccuracy:(CLLocationAccuracy)hAccuracy verticalAccuracy:(CLLocationAccuracy)vAccuracy course:(CLLocationDirection)course speed:(CLLocationSpeed)speed timestamp:(NSDate * _Nonnull)timestamp SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate altitude:(CLLocationDistance)altitude horizontalAccuracy:(CLLocationAccuracy)hAccuracy verticalAccuracy:(CLLocationAccuracy)vAccuracy course:(CLLocationDirection)course courseAccuracy:(CLLocationDirectionAccuracy)courseAccuracy speed:(CLLocationSpeed)speed speedAccuracy:(CLLocationSpeedAccuracy)speedAccuracy timestamp:(NSDate * _Nonnull)timestamp SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate altitude:(CLLocationDistance)altitude horizontalAccuracy:(CLLocationAccuracy)hAccuracy verticalAccuracy:(CLLocationAccuracy)vAccuracy course:(CLLocationDirection)course courseAccuracy:(CLLocationDirectionAccuracy)courseAccuracy speed:(CLLocationSpeed)speed speedAccuracy:(CLLocationSpeedAccuracy)speedAccuracy timestamp:(NSDate * _Nonnull)timestamp sourceInfo:(CLLocationSourceInformation * _Nonnull)sourceInfo SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol KMLocationManagerDelegate;

/// 위치 제공해 주는 매니저입니다. OS보다 더 정확한 위치를 제공합니다. 위치 받을 시간 간격도 조절할 수 있습니다. CLLocationManager를 변수로 갖고 있습니다.
SWIFT_CLASS("_TtC13KMLocationSDK17KMLocationManager")
@interface KMLocationManager : NSObject
/// 콜백 받기 위한 변수.
@property (nonatomic, weak) id <KMLocationManagerDelegate> _Nullable delegate;
/// KMLocationManager의 버전.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull libraryVersion;)
+ (NSString * _Nonnull)libraryVersion SWIFT_WARN_UNUSED_RESULT;
/// 필터의 알고리즘 버전 반환.
/// \param kmFilter 필터.
///
///
/// returns:
/// 버전.
+ (NSString * _Nonnull)getAlgoVersionWithKmFilter:(enum KMFilter)kmFilter SWIFT_WARN_UNUSED_RESULT;
/// 사용자 위치 권한 상태.
@property (nonatomic, readonly) CLAuthorizationStatus authorizationStatus;
/// CLLocationManager의 위치 정확도.
@property (nonatomic) CLLocationAccuracy desiredAccuracy;
/// CLLocationManager의 allowsBackgroundLocationUpdates.
@property (nonatomic) BOOL allowsBackgroundLocationUpdates;
/// CLLocationManager의 showsBackgroundLocationIndicator.
@property (nonatomic) BOOL showsBackgroundLocationIndicator;
/// KMLocationManager 설정.
@property (nonatomic, strong) KMConfig * _Nonnull config;
/// 위치 권한 요청.
- (void)requestWhenInUseAuthorization;
/// 위치 업데이트 시작. 이 함수 호출하시기 전에 setAuthToken, setUserId 세팅해 주셔야 합니다.
- (void)startLocationManager;
/// 위치 업데이트 중지.
- (void)stopLocationManager;
/// 기능 사용 가능 여부 조회.
/// \param featureAvailability 기능.
///
///
/// returns:
/// true 면 사용 가능.
- (BOOL)isFeatureAvailable:(enum KMFeatureAvailability)featureAvailability SWIFT_WARN_UNUSED_RESULT;
/// 한번의 trip에 대한 시작 및 transId 세팅.
/// \param transId transId.
///
- (void)startTripWithTransId:(NSString * _Nonnull)transId;
/// 한번의 trip에 종료.
- (void)stopTrip;
/// routeId 값 세팅
/// \param routeId routeId 값
///
- (void)setRouteIdWithRouteId:(NSString * _Nonnull)routeId;
/// App이 foreground에서 background 진입시 호출. background 상태에서 위치 업데이트 필요시 needLocationUpdate를 true로 설정.
/// \param needLocationUpdate background에서 위치 콜백 받을 건지 여부.
///
- (void)onAppBackgroundedWithNeedLocationUpdate:(BOOL)needLocationUpdate;
/// App이 background에서 foreground 진입시 호출.
- (void)onAppForegrounded;
/// 외부에서 전달되는 msg 로깅.
/// \param code KNSDK 23001001, CarOwner 23002001.
///
/// \param logMsg 로그.
///
- (void)sendExternalIndoorLogWithCode:(NSInteger)code logMsg:(NSString * _Nonnull)logMsg;
/// IVI (CarPlay) 연결 여부 외부에서 주입받는 함수.
/// \param connected IVI (CarPlay) 연결 여부 외부에서 주입받는 함수.
///
- (void)setCarConnected:(BOOL)connected;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum KMStatus : NSInteger;
enum KMRapidChangedEvent : NSInteger;
enum KMMotionActivity : NSInteger;

/// KMLocationManager의 콜백 이벤트를 받기 위한 Delegate.
SWIFT_PROTOCOL("_TtP13KMLocationSDK25KMLocationManagerDelegate_")
@protocol KMLocationManagerDelegate <NSObject>
/// 앱 권한 변경될 때. 애플에서 받은 값 그대로 넘김. https://developer.apple.com/documentation/corelocation/clauthorizationstatus
/// \param manager 콜백을 보내는 manager.
///
/// \param status 앱에 대한 권한 상태 값.
///
- (void)kmLocationManager:(KMLocationManager * _Nonnull)manager didChangeAuthorization:(CLAuthorizationStatus)status;
/// KMLocationManager 상태에 대한 값을 Status객체로 반환.
/// \param manager 콜백을 보내는 manager.
///
/// \param status 위치 권한 상태.
///
/// \param error 네트워크와 같은 오류가 있을 때. 링크 참고: https://developer.apple.com/documentation/corelocation/clerror
///
- (void)kmLocationManager:(KMLocationManager * _Nonnull)manager didChangeStatus:(enum KMStatus)status error:(NSError * _Nullable)error;
/// KMLocationManager에서 제공하는 위치 반환.
/// \param manager 콜백을 보내는 manager.
///
/// \param locations 위치.
///
- (void)kmLocationManager:(KMLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<KMLocation *> * _Nonnull)locations;
/// OS에서 제공하는 기본 위치 반환.
/// \param manager 콜백을 보내는 manager.
///
/// \param locations 위치.
///
- (void)kmLocationManager:(KMLocationManager * _Nonnull)manager didUpdateRawLocations:(NSArray<CLLocation *> * _Nonnull)clLocations;
/// 현재 사용자의 급변화에 대한 반환.
/// \param manager 콜백을 보내는 manager.
///
/// \param rapidChangedEvent 난폭운전 이유를 반환합니다.
///
- (void)kmLocationManager:(KMLocationManager * _Nonnull)manager didChangeRapidSensor:(enum KMRapidChangedEvent)rapidChangedEvent;
/// 현재 사용자의 움직임(차량이동, 도보이동, 정지 등)에 대한 반환.
/// \param manager 콜백을 보내는 manager.
///
/// \param contextEvent 움직임 상태.
///
- (void)kmLocationManager:(KMLocationManager * _Nonnull)manager didDetectMotionActivity:(enum KMMotionActivity)motionActivity;
/// CLLocationManager에서 받은 오류 그대로 반환. https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423786-locationmanager
/// \param manager 콜백을 보내는 manager.
///
/// \param error 오류.
///
- (void)kmLocationManager:(KMLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
@end

@protocol KMLocationSimManagerDelegate;
enum KMSIMStatus : NSInteger;

/// 서버에 저장된 gps 값을 가져와서 위치를 시뮬레이션할 수 있습니다.
SWIFT_CLASS("_TtC13KMLocationSDK20KMLocationSimManager")
@interface KMLocationSimManager : NSObject
/// 콜백 받기 위한 delegate.
@property (nonatomic, weak) id <KMLocationSimManagerDelegate> _Nullable delegate;
/// 위치 업데이트 주기.
@property (nonatomic) double updateInterval;
/// 시뮬레이션 상태.
@property (nonatomic) enum KMSIMStatus simStatus;
/// 시뮬레이션 할 locations.
@property (nonatomic, readonly, copy) NSArray<KMLocation *> * _Nonnull locations;
/// 시뮬레이션 마지막 도착지점 좌표를 반환.
@property (nonatomic, readonly, strong) KMLocation * _Nullable simGoal;
/// 시뮬레이션 재생 배속.
@property (nonatomic) double playSpeed;
/// 시뮬레이션 시작.
- (void)play;
/// 시뮬레이션 일시정지.
- (void)pause;
/// 시뮬레이션 데이터상에서 원하는 지점에서 시작할 수 있도록 시간 세팅.
- (void)skipTo:(NSDate * _Nonnull)date;
/// 시뮬레이션 끝.
- (void)stop;
/// 기능 사용 가능 여부 조회.
/// \param featureAvailability 기능.
///
///
/// returns:
/// true 면 사용 가능.
- (BOOL)isFeatureAvailable:(enum KMFeatureAvailability)featureAvailability SWIFT_WARN_UNUSED_RESULT;
/// 외부에서 전달되는 msg 로깅.
/// \param code KNSDK 23001001, CarOwner 23002001.
///
/// \param logMsg 로그.
///
- (void)sendExternalIndoorLogWithCode:(NSInteger)code logMsg:(NSString * _Nonnull)logMsg;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// KMLocationSimManager의 콜백 이벤트를 받기 위한 Delegate.
SWIFT_PROTOCOL("_TtP13KMLocationSDK28KMLocationSimManagerDelegate_")
@protocol KMLocationSimManagerDelegate <NSObject>
/// 데이터 로드했을 어떤 상태인지 반환.
/// \param manager 콜백을 보내는 manager.
///
/// \param status 시뮬레이션 상태.
///
/// \param error 시뮬레이션 데이터 불러올 때 네트워크 오류.
///
- (void)kmLocationSimManager:(KMLocationSimManager * _Nonnull)manager didChangeSimStatus:(enum KMSIMStatus)status error:(NSError * _Nullable)error;
/// 전체 시뮬레이션 데이터에서 시작, 끝 시간을 반환.
/// \param startDate 시작 시간.
///
/// \param endDate 종료 시간.
///
- (void)kmLocationSimManager:(KMLocationSimManager * _Nonnull)manager didUpdate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate;
/// 시뮬레이션 작동시 로드한 데이터에 대한 위치 반환.
/// \param manager 콜백을 보내는 manager.
///
/// \param locations 시뮬레이션 위치.
///
- (void)kmLocationSimManager:(KMLocationSimManager * _Nonnull)manager didUpdateSimLocations:(NSArray<KMLocation *> * _Nonnull)locations;
@end

/// 사용자 움직임 상태.
typedef SWIFT_ENUM(NSInteger, KMMotionActivity, open) {
/// 어떤상태인지 알 수 없음.
  KMMotionActivityUNKNOWN = 0,
/// 차량.
  KMMotionActivityVEHICLE = 1,
/// 정지.
  KMMotionActivitySTOPPED = 2,
/// 걷기.
  KMMotionActivityWALKING = 3,
/// 달리기.
  KMMotionActivityRUNNING = 4,
/// 자전거.
  KMMotionActivityBICYCLE = 5,
};

/// 급변화 유형 자료구조.
typedef SWIFT_ENUM(NSInteger, KMRapidChangedEvent, open) {
/// 변화는 탐지되었지만 어떤 급격한 변화인지 알 수 없음.
  KMRapidChangedEventUNKNOWN = 0,
/// 급가속.
  KMRapidChangedEventRAPID_ACCEL = 1,
/// 급감속.
  KMRapidChangedEventRAPID_DECEL = 2,
/// 급차선 변경.
  KMRapidChangedEventRAPID_LANE_CHANGE = 3,
/// 급추월.
  KMRapidChangedEventRAPID_OVERTAKING = 4,
/// 급회전.
  KMRapidChangedEventRAPID_TURN = 5,
};

/// 시뮬레이션 상태.
typedef SWIFT_ENUM(NSInteger, KMSIMStatus, open) {
/// 데이터가 정상적으로 다운로드되어 시뮬레이션 준비가 된 상태.
  KMSIMStatusREADY_DATA = 0,
/// 데이터를 받아왔으나 데이터가 존재하지 않음.
  KMSIMStatusEMPTY_DATA = 1,
/// 데이터 다운로드 실패.
  KMSIMStatusFAIL = 2,
/// 시뮬레이션 동작 중.
  KMSIMStatusPLAYING = 3,
/// 시뮬레이션 끝.
  KMSIMStatusFINISHED = 4,
/// 시뮬레이션 일시 중지.
  KMSIMStatusPAUSED = 5,
/// 초기 상태.
  KMSIMStatusNOT_STARTED = 6,
/// 위치 permission 문제에 대한 상태 반환. CLAuthorizationStatus.notDetermined, CLAuthorizationStatus.restricted. 지금은 선언만 되어있음.
  KMSIMStatusNO_PERMISSION = 7,
/// bluetooth permission 문제에 대한 상태 반환. 지금은 선언만 되어있음.
  KMSIMStatusNO_PERMISSION_BLUETOOTH = 8,
/// 기기 모델이 indoor를 지원함.
  KMSIMStatusINDOOR_AVAILABLE = 9,
/// 기기 모델이 indoor를 지원하지 않음.
  KMSIMStatusINDOOR_UNAVAILABLE = 10,
};

/// 위치 받아올 서버.
typedef SWIFT_ENUM(NSInteger, KMSimDataSource, open) {
  KMSimDataSourceCONNECTION = 0,
  KMSimDataSourceCONNECTION_CBT = 1,
  KMSimDataSourceTRIP = 2,
  KMSimDataSourceTRIP_CBT = 3,
  KMSimDataSourceTENTH_CBT = 4,
  KMSimDataSourceTENTH_SBX = 5,
};

/// KMLocationManager 상태에 대한 값.
typedef SWIFT_ENUM(NSInteger, KMStatus, open) {
/// 최초 위치 권한이 있을때 반환. CLAuthorizationStatus.authorizedAlways, CLAuthorizationStatus.authorizedWhenInUse.
  KMStatusSUCCESS = 0,
/// 네트워크와 같은 오류가 있을때. didFailWithError. 참고: https://developer.apple.com/documentation/corelocation/clerror
  KMStatusERROR = 1,
/// 위치 permission 문제에 대한 상태 반환. CLAuthorizationStatus.notDetermined, CLAuthorizationStatus.restricted.
  KMStatusNO_PERMISSION = 2,
/// motion activity permission 문제에 대한 상태 반환. CMMotionActivityManager.authorizationStatus() != .authorized.
  KMStatusNO_PERMISSION_MOTION_ACTIVITY = 3,
/// bluetooth permission 문제에 대한 상태 반환.
  KMStatusNO_PERMISSION_BLUETOOTH = 4,
/// 위치비활성화 상태. CLAuthorizationStatus.denied.
  KMStatusLOCATION_INACTIVATE = 5,
/// 위치활성화 상태. CLAuthorizationStatus.authorizedAlways, CLAuthorizationStatus.authorizedWhenInUse.
  KMStatusLOCATION_ACTIVATE = 6,
/// Auth Token이 유효하지 않을 때 반환.
  KMStatusINVALID_AUTH_TOKEN = 7,
/// 이미 시작된 LocationSDK상태 반환.
  KMStatusALREADY_STARTED = 8,
/// 서버에서 config를 성공적으로 가져왔을 때 반환.
  KMStatusGET_CONFIG_SUCCESS = 9,
/// Indoor 서비스를 활용할 수 없음 (서버에서 막았을시).
  KMStatusDISABLE_INDOOR_SERVER = 10,
/// Indoor 서비스를 활용할 수 없음 (사용자(길안내SDK, locationDemo앱 등) 에서 설정한 filter 가 indoor을 지원하는 filter 설정이 아님, vehicle filter 에서만 사용).
  KMStatusINVALID_FILTER_INDOOR = 11,
/// Indoor 관련 모듈을 초기화 할 수 없음.
  KMStatusINDOOR_SDK_INITIALIZATION_ERROR = 12,
/// 기기 모델이 indoor를 지원함.
  KMStatusINDOOR_AVAILABLE = 13,
/// 기기 모델이 indoor를 지원하지 않음.
  KMStatusINDOOR_UNAVAILABLE = 14,
};


/// KMLocationManager와 KMLocationSimManager를 생성하는 클래스. Config 없이 사용할땐 registerAndStartLocationManager, unregisterAndStopLocationManager 함수 사용. Config가 있을때는 getManagerInstance(_ config: KMConfig)를 넘겨서 KMLocationManager를 받아 사용.
SWIFT_CLASS("_TtC13KMLocationSDK11LocationSDK")
@interface LocationSDK : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 일반 사용자가 기본 위치를 받기 위한 callback 함수 등록.
/// \param identifier register 식별자. unregister할때 같은 identifier 넘겨야함.
///
/// \param didUpdateLocationsHandler callback 함수 등록.
///
+ (void)registerAndStartLocationManagerWithIdentifier:(NSString * _Nonnull)identifier didUpdateLocationsHandler:(void (^ _Nonnull)(NSArray<KMLocation *> * _Nonnull))didUpdateLocationsHandler;
/// 기본 위치를 받기 위한 callback 함수 등록 해제.
/// \param identifier register 했을때의 identifier를 넘겨야 제거됨.
///
+ (void)unregisterAndStopLocationManagerWithIdentifier:(NSString * _Nonnull)identifier;
/// KMLocationManager 생성 함수. 내부 구조는 Singleton, KMLocationManager 1개만 생성됨.
/// \param config KMLocationManager 설정값.
///
///
/// returns:
/// KMLocationManager
+ (KMLocationManager * _Nonnull)getManagerInstanceWithConfig:(KMConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
/// KMLocationManager 생성 함수. 내부는 Singleton구조, KMLocationManager 1개만 생성됨.
/// \param config KMLocationManager 설정값.
///
/// \param completionHandler CLLocationManager의 값을 읽으려면 completionHandler가 호출되고 값을 읽어야 합니다. completionHandler가 호출되기 전 값을 set 하거나 호출한 함수는 KMLocationManager 내부적으로 저장해 놓았다가 CLLocationManager 생성된 후 호출합니다.
///
///
/// returns:
/// KMLocationManager
+ (KMLocationManager * _Nonnull)getManagerInstanceWithConfig:(KMConfig * _Nonnull)config completionHandler:(void (^ _Nonnull)(KMLocationManager * _Nonnull))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// KMLocationSimManager 생성 함수. 내부는 Singleton구조, KMLocationManager 1개만 생성됨.
/// \param date 원하는 시뮬레이션에 해당하는 날짜(day). “yyyyMMdd” 포맷이어야 함.
///
/// \param reqId 수집된 request ID.
///
/// \param source 데이터 받아올 서버.
///
/// \param filter 위치 계산에 활용한 필터.
///
///
/// returns:
/// KMLocationSimManager
+ (KMLocationSimManager * _Nonnull)getSimManagerInstanceWithDate:(NSString * _Nonnull)date reqId:(NSString * _Nonnull)reqId source:(enum KMSimDataSource)source filter:(enum KMFilter)filter SWIFT_WARN_UNUSED_RESULT;
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
